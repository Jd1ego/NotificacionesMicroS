pipeline {
    agent any

    tools {
        gradle 'GRADLE'
        dockerTool 'Docker'
    }

    stages {
        stage('Clone and Checkout Latest Commit') {
            steps {
                git branch: 'develop', url: 'https://github.com/Jd1ego/NotificacionesMicroS'
                sh 'git fetch --all'
                sh 'git reset --hard origin/main'
            }
        }

        stage('Prevent Direct Commit to Master') {
            when {
                branch 'master'
            }
            steps {
                error 'No se permite realizar commits directamente sobre la rama master'
            }
        }

        stage('Set Permissions') {
            steps {
                
                    sh 'chmod +x gradlew'
                
            }
        }

        stage('Run Tests') {
            steps {
                
                    sh './gradlew test'
                
            }
        }

        stage('Generate JaCoCo Report') {
            steps {
                
                    sh './gradlew jacocoTestReport'
                
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonarqube') {
                    
                        sh './gradlew sonarqube -Dsonar.login=squ_03fbd8f33a42c91fe9fe31f18470bcb7fdda181c'
                    
                }
            }
        }

        /*
        stage('Sonar Quality Gate') {
            steps {
                script {
                    def qualityGateResult = waitForQualityGate()
                    if (qualityGateResult.status != 'OK') {
                        error "Quality Gate failed: ${qualityGateResult.status}"
                    }
                }
            }
        }
        */

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerImageTag = "jsebas656/Microservicio-Notificaciones:latest" 
                    sh "docker build -t ${dockerImageTag} -f "
                }
            }
        }

        stage('Trivy Vulnerability Scan') {
            steps {
                script {
                    def dockerImageTag = "jsebas656/estudio-cine:latest"
                    sh """
                    docker run --rm \
                      -v /var/run/docker.sock:/var/run/docker.sock \
                      -v $HOME/Library/Caches:/root/.cache/ \
                      aquasec/trivy image --severity HIGH,CRITICAL \
                      ${dockerImageTag}
                    """
                }
            }
        }



        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    def dockerImageTag = "jsebas656/Microservicios-Notificaciones:latest"
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-credenciales') {
                        sh "docker push ${dockerImageTag}"
                    }
                }
            }
        }
    }

    post {
        always {
            junit '**/build/test-results/test/*.xml'
        }
    }
}
